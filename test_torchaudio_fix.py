#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è torchaudio
"""

def test_torchaudio_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç torchaudio"""
    try:
        import torchaudio
        print(f"‚úÖ torchaudio –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ: {torchaudio.__version__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        required_attrs = ['lib', 'transforms', 'functional', 'backend', '__version__']
        missing_attrs = []
        
        for attr in required_attrs:
            if hasattr(torchaudio, attr):
                print(f"‚úÖ {attr}: –Ω–∞–π–¥–µ–Ω")
            else:
                missing_attrs.append(attr)
                print(f"‚ùå {attr}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        if missing_attrs:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞—Ç—Ä–∏–±—É—Ç—ã: {missing_attrs}")
            return False
        else:
            print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ torchaudio: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_submodules():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –ø–æ–¥–º–æ–¥—É–ª–µ–π torchaudio"""
    try:
        import torchaudio.transforms
        import torchaudio.functional
        import torchaudio.lib
        print("‚úÖ –í—Å–µ –ø–æ–¥–º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ–¥–º–æ–¥—É–ª–µ–π: {e}")
        return False

def test_circular_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫—Ä—É–≥–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    try:
        # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫
        import sys
        if 'torchaudio' in sys.modules:
            del sys.modules['torchaudio']
        if 'torchaudio.transforms' in sys.modules:
            del sys.modules['torchaudio.transforms']
        if 'torchaudio.functional' in sys.modules:
            del sys.modules['torchaudio.functional']
        if 'torchaudio.lib' in sys.modules:
            del sys.modules['torchaudio.lib']
            
        # –ü–µ—Ä–µ–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
        import torchaudio
        print("‚úÖ –ö—Ä—É–≥–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫—Ä—É–≥–æ–≤—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏: {e}")
        return False

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è torchaudio...")
    
    results = []
    results.append(test_torchaudio_import())
    results.append(test_submodules())
    results.append(test_circular_import())
    
    if all(results):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        exit(0)
    else:
        print(f"\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã: {sum(results)}/{len(results)}")
        exit(1)