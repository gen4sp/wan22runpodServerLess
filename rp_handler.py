#!/usr/bin/env python3

import runpod
import requests
import json
import base64
import io
import time
from PIL import Image
import os
import logging
from workflows import process_workflow, analyze_workflow, get_workflow_info, WorkflowType

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ComfyUI API endpoint
COMFY_URL = "http://127.0.0.1:8188"

def wait_for_comfy():
    """–ñ–¥–µ–º –ø–æ–∫–∞ ComfyUI API —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º"""
    max_attempts = 60
    for i in range(max_attempts):
        try:
            response = requests.get(f"{COMFY_URL}/system_stats", timeout=5)
            if response.status_code == 200:
                logger.info("ComfyUI API –≥–æ—Ç–æ–≤")
                return True
            else:
                logger.warning(f"ComfyUI API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
        except requests.exceptions.ConnectionError as e:
            logger.warning(f"–ñ–¥–µ–º ComfyUI API... –ø–æ–ø—ã—Ç–∫–∞ {i+1}/{max_attempts} - –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        except requests.exceptions.Timeout as e:
            logger.warning(f"–ñ–¥–µ–º ComfyUI API... –ø–æ–ø—ã—Ç–∫–∞ {i+1}/{max_attempts} - –¢–∞–π–º–∞—É—Ç: {e}")
        except requests.exceptions.RequestException as e:
            logger.warning(f"–ñ–¥–µ–º ComfyUI API... –ø–æ–ø—ã—Ç–∫–∞ {i+1}/{max_attempts} - –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 5 –ø–æ–ø—ã—Ç–æ–∫ (—á–∞—â–µ!)
        if (i + 1) % 5 == 0:
            logger.info(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ {i+1} –ø–æ–ø—ã—Ç–æ–∫:")
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å ComfyUI
                import subprocess
                result = subprocess.run(['pgrep', '-f', 'main.py'], capture_output=True, text=True)
                if result.returncode == 0:
                    pids = result.stdout.strip().split('\n')
                    logger.info(f"   üìä –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã ComfyUI: {pids}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU/–ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º
                    for pid in pids:
                        try:
                            cpu_result = subprocess.run(['ps', '-p', pid, '-o', 'pid,pcpu,pmem,etime,cmd'], capture_output=True, text=True)
                            if cpu_result.returncode == 0:
                                logger.info(f"   üìà –ü—Ä–æ—Ü–µ—Å—Å {pid}: {cpu_result.stdout.strip().split(chr(10))[-1]}")
                        except:
                            pass
                else:
                    logger.warning("   ‚ùå –ü—Ä–æ—Ü–µ—Å—Å ComfyUI –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç 8188
                result = subprocess.run(['netstat', '-tlnp'], capture_output=True, text=True)
                if ':8188' in result.stdout:
                    logger.info("   üîå –ü–æ—Ä—Ç 8188 —Å–ª—É—à–∞–µ—Ç—Å—è")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ç–æ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç
                    for line in result.stdout.split('\n'):
                        if ':8188' in line:
                            logger.info(f"   üîå –ü–æ—Ä—Ç 8188: {line.strip()}")
                else:
                    logger.warning("   ‚ùå –ü–æ—Ä—Ç 8188 –Ω–µ —Å–ª—É—à–∞–µ—Ç—Å—è")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ ComfyUI
                try:
                    # –ò—â–µ–º –ª–æ–≥–∏ ComfyUI –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
                    log_paths = ['/tmp/comfyui.log', '/comfyui/comfyui.log', '/var/log/comfyui.log']
                    for log_path in log_paths:
                        if os.path.exists(log_path):
                            with open(log_path, 'r') as f:
                                lines = f.readlines()
                                if lines:
                                    logger.info(f"   üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ {log_path}:")
                                    for line in lines[-3:]:
                                        logger.info(f"      {line.strip()}")
                                    break
                    else:
                        logger.info("   üìÑ –õ–æ–≥–∏ ComfyUI –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–µ—Ä–µ–∑ journalctl
                        try:
                            journal_result = subprocess.run(['journalctl', '--since', '5 minutes ago', '--grep', 'ComfyUI'], capture_output=True, text=True)
                            if journal_result.returncode == 0 and journal_result.stdout.strip():
                                logger.info("   üìÑ –ò–∑ –∂—É—Ä–Ω–∞–ª–∞ —Å–∏—Å—Ç–µ–º—ã:")
                                for line in journal_result.stdout.strip().split('\n')[-3:]:
                                    logger.info(f"      {line}")
                        except:
                            pass
                except Exception as log_e:
                    logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {log_e}")
                    
            except Exception as diag_e:
                logger.error(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {diag_e}")
        
        time.sleep(5)
    
    logger.error(f"‚ùå ComfyUI API –Ω–µ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞ {max_attempts * 5} —Å–µ–∫—É–Ω–¥")
    return False

def encode_image_to_base64(image_path):
    """–ö–æ–¥–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64"""
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode('utf-8')

# –µ—É
def upload_image_to_comfy(image_data, filename="input_image.png"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ ComfyUI"""
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if isinstance(image_data, str) and image_data.startswith('data:image'):
            # –£–±–∏—Ä–∞–µ–º data:image/png;base64, –ø—Ä–µ—Ñ–∏–∫—Å
            image_data = image_data.split(',')[1]
        
        if isinstance(image_data, str):
            image_bytes = base64.b64decode(image_data)
        else:
            image_bytes = image_data
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ input –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ComfyUI
        input_dir = "/comfyui/input"
        os.makedirs(input_dir, exist_ok=True)
        
        image_path = os.path.join(input_dir, filename)
        with open(image_path, "wb") as f:
            f.write(image_bytes)
            
        logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {filename}")
        return filename
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        raise

def create_empty_image(width=832, height=832, filename="empty_image.png"):
    """–°–æ–∑–¥–∞–µ—Ç —á–µ—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è T2V —Ä–µ–∂–∏–º–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PIL
        image = Image.new('RGB', (width, height), color='black')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ input –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ComfyUI
        input_dir = "/comfyui/input"
        os.makedirs(input_dir, exist_ok=True)
        
        image_path = os.path.join(input_dir, filename)
        image.save(image_path)
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ –ø—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {width}x{height} –∫–∞–∫ {filename}")
        return filename
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        raise

def get_output_files_by_type(result, workflow_type):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ—Ä–∫—Ñ–ª–æ·ÄØ"""
    output_files = []
    
    try:
        # –î–ª—è –≤–∏–¥–µ–æ –≤–æ—Ä–∫—Ñ–ª–æ—É –∏—â–µ–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã
        if workflow_type in [WorkflowType.T2V, WorkflowType.VIDEO_UPSCALE]:
            for node_id, node_result in result.get("outputs", {}).items():
                # –ò—â–µ–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã
                if "gifs" in node_result:
                    for gif_info in node_result["gifs"]:
                        filename = gif_info["filename"]
                        output_files.append({
                            "type": "video",
                            "filename": filename,
                            "path": f"/comfyui/output/{filename}"
                        })
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–∏–¥–µ–æ
                elif "videos" in node_result:
                    for video_info in node_result["videos"]:
                        filename = video_info["filename"]
                        output_files.append({
                            "type": "video",
                            "filename": filename,
                            "path": f"/comfyui/output/{filename}"
                        })
        
        # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–æ—Ä–∫—Ñ–ª–æ—É –∏—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        elif workflow_type in [WorkflowType.T2I, WorkflowType.IMG2IMG]:
            for node_id, node_result in result.get("outputs", {}).items():
                if "images" in node_result:
                    for img_info in node_result["images"]:
                        filename = img_info["filename"]
                        output_files.append({
                            "type": "image",
                            "filename": filename,
                            "path": f"/comfyui/output/{filename}"
                        })
        
        # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
        else:
            for node_id, node_result in result.get("outputs", {}).items():
                # –°–Ω–∞—á–∞–ª–∞ –≤–∏–¥–µ–æ
                if "gifs" in node_result:
                    for gif_info in node_result["gifs"]:
                        filename = gif_info["filename"]
                        output_files.append({
                            "type": "video",
                            "filename": filename,
                            "path": f"/comfyui/output/{filename}"
                        })
                elif "videos" in node_result:
                    for video_info in node_result["videos"]:
                        filename = video_info["filename"]
                        output_files.append({
                            "type": "video",
                            "filename": filename,
                            "path": f"/comfyui/output/{filename}"
                        })
                # –ó–∞—Ç–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                elif "images" in node_result:
                    for img_info in node_result["images"]:
                        filename = img_info["filename"]
                        output_files.append({
                            "type": "image",
                            "filename": filename,
                            "path": f"/comfyui/output/{filename}"
                        })
                        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
        
    return output_files

def queue_workflow(workflow):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ—Ä–∫—Ñ–ª–æ—É –≤ –æ—á–µ—Ä–µ–¥—å ComfyUI"""
    try:
        response = requests.post(f"{COMFY_URL}/prompt", json={"prompt": workflow})
        response.raise_for_status()
        return response.json()["prompt_id"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
        raise

def wait_for_completion(prompt_id, timeout=600):
    """–ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    start_time = time.time()
    last_log_time = start_time
    
    logger.info(f"üïê –ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {prompt_id} (—Ç–∞–π–º–∞—É—Ç: {timeout}s)")
    
    while time.time() - start_time < timeout:
        try:
            elapsed = time.time() - start_time
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            if time.time() - last_log_time >= 30:
                logger.info(f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {elapsed:.0f}s/{timeout}s")
                last_log_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ history
            response = requests.get(f"{COMFY_URL}/history/{prompt_id}", timeout=10)
            
            if response.status_code == 200:
                history = response.json()
                if prompt_id in history:
                    # –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                    result = history[prompt_id]
                    status = result.get("status", {})
                    
                    if status.get("completed", False):
                        logger.info(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed:.1f}s")
                        return result
                    elif "error" in status:
                        error_msg = status.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_msg}")
                        raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_msg}")
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å
                        queue_response = requests.get(f"{COMFY_URL}/queue", timeout=5)
                        if queue_response.status_code == 200:
                            queue_data = queue_response.json()
                            queue_running = queue_data.get("queue_running", [])
                            queue_pending = queue_data.get("queue_pending", [])
                            
                            # –ò—â–µ–º –Ω–∞—à prompt_id –≤ –æ—á–µ—Ä–µ–¥–∏
                            in_running = any(item[1] == prompt_id for item in queue_running)
                            in_pending = any(item[1] == prompt_id for item in queue_pending)
                            
                            if in_running:
                                logger.debug(f"üîÑ –ó–∞–¥–∞—á–∞ {prompt_id} –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...")
                            elif in_pending:
                                position = next((i for i, item in enumerate(queue_pending) if item[1] == prompt_id), -1)
                                logger.info(f"‚è≥ –ó–∞–¥–∞—á–∞ {prompt_id} –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {position + 1}")
                            else:
                                logger.warning(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {prompt_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥–∏")
                        
            elif response.status_code == 404:
                logger.debug(f"üîç –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è {prompt_id} –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç /history: {response.status_code}")
                        
            time.sleep(5)
            
        except requests.exceptions.Timeout as e:
            logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            time.sleep(5)
        except requests.exceptions.RequestException as e:
            logger.warning(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            time.sleep(5)
        except Exception as e:
            logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            time.sleep(5)
    
    elapsed = time.time() - start_time
    logger.error(f"‚è∞ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑–∞ {timeout}s (–ø—Ä–æ—à–ª–æ {elapsed:.1f}s)")
    raise TimeoutError(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")



def encode_file_to_base64(file_path):
    """–ö–æ–¥–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –≤ base64 –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    try:
        with open(file_path, "rb") as f:
            return base64.b64encode(f.read()).decode('utf-8')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return None

def get_system_debug_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    debug_info = {}
    try:
        import subprocess
        import psutil
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
        try:
            result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
            comfy_processes = [line for line in result.stdout.split('\n') if 'main.py' in line or 'comfy' in line.lower()]
            debug_info['comfy_processes'] = comfy_processes
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö ComfyUI
            pgrep_result = subprocess.run(['pgrep', '-f', 'main.py'], capture_output=True, text=True)
            if pgrep_result.returncode == 0:
                pids = pgrep_result.stdout.strip().split('\n')
                debug_info['comfy_pids'] = pids
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
                process_details = []
                for pid in pids:
                    try:
                        ps_result = subprocess.run(['ps', '-p', pid, '-o', 'pid,ppid,pcpu,pmem,etime,stat,cmd'], capture_output=True, text=True)
                        if ps_result.returncode == 0:
                            process_details.append(ps_result.stdout.strip())
                    except:
                        pass
                debug_info['process_details'] = process_details
            else:
                debug_info['comfy_pids'] = []
                debug_info['process_details'] = []
        except Exception as e:
            debug_info['comfy_processes'] = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä—Ç–∞—Ö
        try:
            result = subprocess.run(['netstat', '-tlnp'], capture_output=True, text=True)
            port_8188 = [line for line in result.stdout.split('\n') if ':8188' in line]
            debug_info['port_8188'] = port_8188
            
            # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º —á–µ—Ä–µ–∑ ss (–±–æ–ª–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞)
            try:
                ss_result = subprocess.run(['ss', '-tlnp'], capture_output=True, text=True)
                ss_8188 = [line for line in ss_result.stdout.split('\n') if ':8188' in line]
                debug_info['ss_port_8188'] = ss_8188
            except:
                debug_info['ss_port_8188'] = "ss –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                
        except Exception as e:
            debug_info['port_8188'] = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤: {e}"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
        try:
            memory = psutil.virtual_memory()
            debug_info['memory'] = {
                'total': f"{memory.total / 1024**3:.1f}GB",
                'available': f"{memory.available / 1024**3:.1f}GB",
                'used': f"{memory.used / 1024**3:.1f}GB",
                'percent': f"{memory.percent}%"
            }
        except Exception as e:
            debug_info['memory'] = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPU
        try:
            result = subprocess.run(['nvidia-smi', '--query-gpu=memory.total,memory.used,memory.free,utilization.gpu,temperature.gpu', '--format=csv,noheader,nounits'], capture_output=True, text=True)
            if result.returncode == 0:
                gpu_data = result.stdout.strip().split(',')
                debug_info['gpu_memory'] = {
                    'total': f"{int(gpu_data[0])/1024:.1f}GB",
                    'used': f"{int(gpu_data[1])/1024:.1f}GB",
                    'free': f"{int(gpu_data[2])/1024:.1f}GB",
                    'utilization': f"{gpu_data[3]}%",
                    'temperature': f"{gpu_data[4]}¬∞C"
                }
        except Exception as e:
            debug_info['gpu_memory'] = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è GPU –ø–∞–º—è—Ç–∏: {e}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ ComfyUI –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        try:
            log_paths = ['/tmp/comfyui.log', '/comfyui/comfyui.log', '/var/log/comfyui.log']
            found_logs = {}
            
            for log_path in log_paths:
                if os.path.exists(log_path):
                    try:
                        with open(log_path, 'r') as f:
                            lines = f.readlines()
                            found_logs[log_path] = {
                                'exists': True,
                                'lines_count': len(lines),
                                'last_lines': lines[-10:] if len(lines) > 10 else lines
                            }
                    except Exception as e:
                        found_logs[log_path] = {'exists': True, 'error': str(e)}
                else:
                    found_logs[log_path] = {'exists': False}
            
            debug_info['comfyui_logs'] = found_logs
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞ ComfyUI —á–µ—Ä–µ–∑ /proc
            try:
                pgrep_result = subprocess.run(['pgrep', '-f', 'main.py'], capture_output=True, text=True)
                if pgrep_result.returncode == 0:
                    pids = pgrep_result.stdout.strip().split('\n')
                    proc_info = []
                    for pid in pids:
                        try:
                            with open(f'/proc/{pid}/cmdline', 'r') as f:
                                cmdline = f.read().replace('\x00', ' ')
                            with open(f'/proc/{pid}/status', 'r') as f:
                                status = f.read()
                            proc_info.append({
                                'pid': pid,
                                'cmdline': cmdline,
                                'status_excerpt': status[:500] + '...' if len(status) > 500 else status
                            })
                        except:
                            pass
                    debug_info['proc_info'] = proc_info
            except:
                debug_info['proc_info'] = "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è /proc"
                
        except Exception as e:
            debug_info['comfyui_logs'] = f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ComfyUI —Ñ–∞–π–ª–æ–≤
        try:
            comfy_paths = ['/comfyui', '/comfyui/main.py', '/comfyui/server.py']
            path_info = {}
            for path in comfy_paths:
                path_info[path] = {
                    'exists': os.path.exists(path),
                    'is_file': os.path.isfile(path) if os.path.exists(path) else False,
                    'is_dir': os.path.isdir(path) if os.path.exists(path) else False
                }
            debug_info['comfy_paths'] = path_info
        except Exception as e:
            debug_info['comfy_paths'] = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É—Ç–µ–π: {e}"
            
    except Exception as e:
        debug_info['error'] = str(e)
    
    return debug_info

def check_comfy_health():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è ComfyUI API"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        endpoints_to_check = [
            ("/system_stats", "–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            ("/queue", "–û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞–Ω–∏–π"),
            ("/history", "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞–Ω–∏–π")
        ]
        
        health_status = {"healthy": True, "checks": {}}
        
        for endpoint, description in endpoints_to_check:
            try:
                response = requests.get(f"{COMFY_URL}{endpoint}", timeout=3)
                health_status["checks"][endpoint] = {
                    "status": response.status_code,
                    "description": description,
                    "healthy": response.status_code == 200
                }
                if response.status_code != 200:
                    health_status["healthy"] = False
            except Exception as e:
                health_status["checks"][endpoint] = {
                    "status": "error",
                    "description": description,
                    "error": str(e),
                    "healthy": False
                }
                health_status["healthy"] = False
        
        return health_status
        
    except Exception as e:
        return {"healthy": False, "error": str(e)}

def restart_comfyui():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç ComfyUI"""
    try:
        import subprocess
        
        logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ ComfyUI...")
        
        # –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã ComfyUI
        try:
            result = subprocess.run(['pkill', '-f', 'main.py'], capture_output=True, text=True)
            logger.info(f"   üî™ pkill main.py: –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ {result.returncode}")
            time.sleep(2)
        except Exception as e:
            logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ pkill: {e}")
        
        # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 8188
        try:
            result = subprocess.run(['fuser', '-k', '8188/tcp'], capture_output=True, text=True)
            logger.info(f"   üî™ fuser -k 8188/tcp: –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ {result.returncode}")
            time.sleep(1)
        except Exception as e:
            logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ fuser: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º ComfyUI –∑–∞–Ω–æ–≤–æ
        try:
            logger.info("   üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ ComfyUI...")
            process = subprocess.Popen([
                'python3', '/comfyui/main.py', 
                '--listen', '0.0.0.0', 
                '--port', '8188',
                '--disable-auto-launch'
            ], 
            cwd='/comfyui',
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE,
            preexec_fn=os.setsid  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            )
            
            logger.info(f"   ‚úÖ ComfyUI –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å PID: {process.pid}")
            time.sleep(5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            
            return {"success": True, "new_pid": process.pid}
            
        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ComfyUI: {e}")
            return {"success": False, "error": str(e)}
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ ComfyUI: {e}")
        return {"success": False, "error": str(e)}

def handler(event):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ RunPod —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö JSON –≤–æ—Ä–∫—Ñ–ª–æ—É"""
    try:
        input_data = event.get("input", {})
        action = input_data.get("action")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if action == "debug_system":
            return {"debug_info": get_system_debug_info()}
        elif action == "health_check":
            return {"health": check_comfy_health()}
        elif action == "ping":
            return {"status": "pong", "timestamp": time.time()}
        elif action == "restart_comfyui":
            return {"restart_result": restart_comfyui()}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ComfyUI
        if not wait_for_comfy():
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏
            debug_info = get_system_debug_info()
            health_info = check_comfy_health()
            return {
                "error": "ComfyUI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", 
                "debug_info": debug_info,
                "health_info": health_info
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        input_data = event["input"]
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–æ—Ä–∫—Ñ–ª–æ—É
        if input_data.get("action") == "analyze_workflow":
            workflow = input_data.get("workflow")
            if not workflow:
                return {"error": "–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–æ—Ä–∫—Ñ–ª–æ—É –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ 'workflow'"}
            return {"workflow_info": get_workflow_info(workflow)}
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä workflow (–ø–æ–ª–Ω—ã–π JSON)
        workflow = input_data.get("workflow")
        if not workflow:
            return {"error": "–ü–∞—Ä–∞–º–µ—Ç—Ä 'workflow' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–Ω—ã–π JSON –≤–æ—Ä–∫—Ñ–ª–æ—É ComfyUI"}
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        prompt = input_data.get("prompt")
        image_data = input_data.get("image")
        video_data = input_data.get("video") 
        options = input_data.get("options", {})
        
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ—Ä–∫—Ñ–ª–æ—É —Å {len(workflow)} —É–∑–ª–∞–º–∏")
        if prompt:
            logger.info(f"–ü—Ä–æ–º–ø—Ç: {prompt}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ—Ä–∫—Ñ–ª–æ—É
        try:
            prepared_workflow, workflow_type, metadata = process_workflow(
                workflow=workflow,
                prompt=prompt,
                image_data=image_data,
                video_data=video_data,
                options=options
            )
        except ValueError as e:
            return {"error": f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–æ—Ä–∫—Ñ–ª–æ—É: {str(e)}"}
        
        logger.info(f"–í–æ—Ä–∫—Ñ–ª–æ—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω: —Ç–∏–ø={workflow_type.value}, —É–∑–ª–æ–≤={metadata['node_count']}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å ComfyUI
        prompt_id = queue_workflow(prepared_workflow)
        logger.info(f"–í–æ—Ä–∫—Ñ–ª–æ—É –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å: {prompt_id}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        result = wait_for_completion(prompt_id)
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
        output_files = get_output_files_by_type(result, workflow_type)
        
        if not output_files:
            return {"error": "–í—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
        
        # –ö–æ–¥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
        main_file = output_files[0]
        file_base64 = encode_file_to_base64(main_file["path"])
        
        if not file_base64:
            return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å {main_file['type']}"}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {
            main_file["type"]: file_base64,
            "filename": main_file["filename"],
            "prompt_id": prompt_id,
            "files_count": len(output_files),
            "workflow_type": workflow_type.value,
            "metadata": metadata
        }
        
        return response
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
        return {"error": str(e)}

if __name__ == "__main__":
    runpod.serverless.start({"handler": handler})