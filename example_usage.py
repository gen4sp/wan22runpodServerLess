#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è WAN 2.2 ServerLess Worker
"""

import requests
import base64
import json
import time
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
RUNPOD_API_KEY = "your_api_key_here"
ENDPOINT_ID = "your_endpoint_id_here"
RUNPOD_URL = f"https://api.runpod.ai/v2/{ENDPOINT_ID}"

def encode_image(image_path):
    """–ö–æ–¥–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64"""
    with open(image_path, "rb") as f:
        image_data = base64.b64encode(f.read()).decode()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
    suffix = Path(image_path).suffix.lower()
    mime_type = {
        '.jpg': 'jpeg',
        '.jpeg': 'jpeg', 
        '.png': 'png',
        '.webp': 'webp'
    }.get(suffix, 'jpeg')
    
    return f"data:image/{mime_type};base64,{image_data}"

def save_video(video_base64, output_path):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∏–¥–µ–æ –∏–∑ base64"""
    video_data = base64.b64decode(video_base64)
    with open(output_path, "wb") as f:
        f.write(video_data)
    print(f"‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")

def generate_video(image_path, prompt, options=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ RunPod API"""
    
    # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    print(f"üì∏ –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
    image_b64 = encode_image(image_path)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    payload = {
        "input": {
            "prompt": prompt,
            "image": image_b64,
            "options": options or {}
        }
    }
    
    headers = {
        "Authorization": f"Bearer {RUNPOD_API_KEY}",
        "Content-Type": "application/json"
    }
    
    print(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: {prompt[:50]}...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º runsync –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    response = requests.post(
        f"{RUNPOD_URL}/runsync", 
        json=payload, 
        headers=headers,
        timeout=300  # 5 –º–∏–Ω—É—Ç
    )
    
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
        print(response.text)
        return None
    
    result = response.json()
    
    if "error" in result:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['error']}")
        return None
    
    if "output" not in result:
        print(f"‚ùå –ù–µ—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {result}")
        return None
        
    return result["output"]

def generate_text_to_video(prompt, options=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Ç–æ–ª—å–∫–æ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ (T2V —Ä–µ–∂–∏–º)"""
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    payload = {
        "input": {
            "prompt": prompt,
            "options": options or {}
        }
    }
    
    headers = {
        "Authorization": f"Bearer {RUNPOD_API_KEY}",
        "Content-Type": "application/json"
    }
    
    print(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º T2V –∑–∞–ø—Ä–æ—Å...")
    print(f"üìù –ü—Ä–æ–º–ø—Ç: {prompt}")
    if options:
        print(f"‚öôÔ∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {options}")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(
            f"{RUNPOD_URL}/runsync", 
            json=payload, 
            headers=headers,
            timeout=600  # 10 –º–∏–Ω—É—Ç
        )
        
        response.raise_for_status()
        result = response.json()
        
        if "error" in result:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['error']}")
            return None
        
        if "output" not in result:
            print(f"‚ùå –ù–µ—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {result}")
            return None
            
        return result["output"]
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    
    # –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    print("üé¨ –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
    
    result = generate_video(
        image_path="input_image.jpg",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        prompt="A majestic eagle soaring through clouds, cinematic, high quality",
        options={
            "width": 832,
            "height": 832,
            "length": 81,
            "steps": 6,
            "cfg": 1.0,
            "frame_rate": 24
        }
    )
    
    if result:
        save_video(result["video"], "output_eagle.mp4")
        print(f"üìÅ –§–∞–π–ª: {result['filename']}")
        print(f"üÜî Prompt ID: {result['prompt_id']}")
    
    # –ü—Ä–∏–º–µ—Ä 2: –ö–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ –≤ –≤—ã—Å–æ–∫–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
    print("\nüé¨ –ü—Ä–∏–º–µ—Ä 2: HD –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ")
    
    result = generate_video(
        image_path="input_image.jpg",
        prompt="A cat walking gracefully, professional lighting, 4k quality",
        options={
            "width": 1280,
            "height": 720,
            "length": 49,  # –ú–µ–Ω—å—à–µ –∫–∞–¥—Ä–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ VRAM
            "steps": 6,
            "cfg": 1.2,
            "frame_rate": 24,
            "seed": 42
        }
    )
    
    if result:
        save_video(result["video"], "output_cat_hd.mp4")
    
    # –ü—Ä–∏–º–µ—Ä 3: –î–ª–∏–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
    print("\nüé¨ –ü—Ä–∏–º–µ—Ä 3: –î–ª–∏–Ω–Ω–æ–µ –≤–∏–¥–µ–æ")
    
    result = generate_video(
        image_path="input_image.jpg", 
        prompt="Ocean waves gently lapping on the shore, peaceful, relaxing",
        options={
            "width": 640,
            "height": 640,
            "length": 121,  # ~5 —Å–µ–∫—É–Ω–¥
            "steps": 6,
            "cfg": 1.0,
            "frame_rate": 24
        }
    )
    
    if result:
        save_video(result["video"], "output_ocean_long.mp4")
    
    # –ü—Ä–∏–º–µ—Ä 4: Text-to-Video (–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    print("\nüé¨ –ü—Ä–∏–º–µ—Ä 4: T2V - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–æ–º–ø—Ç—É")
    
    result = generate_text_to_video(
        prompt="A majestic dragon flying through stormy clouds, lightning, epic fantasy, cinematic",
        options={
            "width": 832,
            "height": 832,
            "length": 81,
            "steps": 6,
            "cfg": 1.0,
            "frame_rate": 24,
            "seed": 123
        }
    )
    
    if result:
        save_video(result["video"], "output_dragon_t2v.mp4")
        print(f"üìÅ –§–∞–π–ª: {result['filename']}")
        print(f"üÜî Prompt ID: {result['prompt_id']}")

def async_example():
    """–ü—Ä–∏–º–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å run"""
    
    payload = {
        "input": {
            "prompt": "A butterfly landing on a flower",
            "image": encode_image("input_image.jpg"),
            "options": {"width": 832, "height": 832, "length": 81}
        }
    }
    
    headers = {
        "Authorization": f"Bearer {RUNPOD_API_KEY}",
        "Content-Type": "application/json"
    }
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
    response = requests.post(f"{RUNPOD_URL}/run", json=payload, headers=headers)
    job_id = response.json()["id"]
    
    print(f"üÜî –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞: {job_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    while True:
        status_response = requests.get(f"{RUNPOD_URL}/status/{job_id}", headers=headers)
        status = status_response.json()
        
        if status["status"] == "COMPLETED":
            result = status["output"]
            save_video(result["video"], "output_async.mp4")
            break
        elif status["status"] == "FAILED":
            print(f"‚ùå –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å: {status.get('error', 'Unknown error')}")
            break
        else:
            print(f"‚è≥ –°—Ç–∞—Ç—É—Å: {status['status']}")
            time.sleep(5)

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not Path("input_image.jpg").exists():
        print("‚ùå –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª input_image.jpg –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏–º–µ—Ä–∞")
        print("üìã –ò–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ –∫–æ–¥–µ")
        exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if RUNPOD_API_KEY == "your_api_key_here":
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–∞—à RunPod API –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π RUNPOD_API_KEY")
        exit(1)
        
    if ENDPOINT_ID == "your_endpoint_id_here":
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≤–∞—à–µ–≥–æ Endpoint –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ENDPOINT_ID")
        exit(1)
    
    main()
    
    print("\nüîÑ –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º? (y/N): ", end="")
    if input().lower() == 'y':
        async_example()