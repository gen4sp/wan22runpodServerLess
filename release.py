#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è GitHub release.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python release.py patch   # 1.0.0 -> 1.0.1
    python release.py minor   # 1.0.0 -> 1.1.0
    python release.py major   # 1.0.0 -> 2.0.0
"""

import sys
import json
import subprocess
import os
import re
from pathlib import Path

def get_current_version():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ version.py."""
    with open("version.py", "r", encoding="utf-8") as f:
        content = f.read()
    
    match = re.search(r'__version__ = "(\d+\.\d+\.\d+)"', content)
    if not match:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–µ—Ä—Å–∏—é –≤ version.py")
    
    return match.group(1)

def increment_version(version, increment_type):
    """–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –≤–µ—Ä—Å–∏—é."""
    major, minor, patch = map(int, version.split("."))
    
    if increment_type == "major":
        major += 1
        minor = 0
        patch = 0
    elif increment_type == "minor":
        minor += 1
        patch = 0
    elif increment_type == "patch":
        patch += 1
    else:
        raise ValueError("–¢–∏–ø –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'major', 'minor' –∏–ª–∏ 'patch'")
    
    return f"{major}.{minor}.{patch}"

def update_version_file(new_version):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª version.py —Å –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π."""
    with open("version.py", "r", encoding="utf-8") as f:
        content = f.read()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
    content = re.sub(
        r'__version__ = "\d+\.\d+\.\d+"',
        f'__version__ = "{new_version}"',
        content
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –∏–Ω—Ñ–æ
    version_info = ', '.join(new_version.split('.'))
    content = re.sub(
        r'__version_info__ = tuple\(map\(int, __version__\.split\("\."\)\)\)',
        f'__version_info__ = ({version_info})',
        content
    )
    
    with open("version.py", "w", encoding="utf-8") as f:
        f.write(content)

def update_deploy_config(new_version):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç deploy_config.json —Å –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π –≤ Docker image."""
    with open("deploy_config.json", "r", encoding="utf-8") as f:
        config = json.load(f)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º Docker image tag
    current_image = config.get("dockerImage", "")
    base_image = current_image.split(":")[0] if ":" in current_image else current_image
    config["dockerImage"] = f"{base_image}:v{new_version}"
    
    with open("deploy_config.json", "w", encoding="utf-8") as f:
        json.dump(config, f, indent=4, ensure_ascii=False)

def run_command(command, check=True):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ shell."""
    print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {command}")
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    
    if check and result.returncode != 0:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {command}")
        print(f"stdout: {result.stdout}")
        print(f"stderr: {result.stderr}")
        sys.exit(1)
    
    return result

def git_commit_and_tag(version):
    """–°–æ–∑–¥–∞–µ—Ç git commit –∏ tag."""
    run_command("git add version.py deploy_config.json")
    run_command(f'git commit -m "chore: bump version to {version}"')
    run_command(f"git tag -a v{version} -m 'Release v{version}'")

def create_github_release(version):
    """–°–æ–∑–¥–∞–µ—Ç GitHub release –∏—Å–ø–æ–ª—å–∑—É—è gh CLI."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ gh CLI
    result = run_command("which gh", check=False)
    if result.returncode != 0:
        print("‚ö†Ô∏è  GitHub CLI (gh) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ GitHub release.")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ gh CLI: https://cli.github.com/")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    result = run_command("gh auth status", check=False)
    if result.returncode != 0:
        print("‚ö†Ô∏è  –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ GitHub CLI. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ GitHub release.")
        print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: gh auth login")
        return
    
    # –°–æ–∑–¥–∞–µ–º release
    release_notes = f"""# WAN 2.2 RunPod Worker v{version}

## –ò–∑–º–µ–Ω–µ–Ω–∏—è
- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –¥–æ {version}

## Docker Image
```
docker pull $(jq -r '.dockerImage' deploy_config.json)
```

## –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ RunPod
1. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ `deploy_config.json`
2. –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ RunPod Console –∏–ª–∏ API
"""
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å release notes
    with open("temp_release_notes.md", "w", encoding="utf-8") as f:
        f.write(release_notes)
    
    try:
        run_command(f'gh release create v{version} --title "v{version}" --notes-file temp_release_notes.md')
        print(f"‚úÖ GitHub release v{version} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists("temp_release_notes.md"):
            os.remove("temp_release_notes.md")

def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python release.py [patch|minor|major]")
        sys.exit(1)
    
    increment_type = sys.argv[1].lower()
    if increment_type not in ["patch", "minor", "major"]:
        print("–¢–∏–ø –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'patch', 'minor' –∏–ª–∏ 'major'")
        sys.exit(1)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        run_command("git status")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        result = run_command("git status --porcelain", check=False)
        if result.stdout.strip():
            print("‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ó–∞–∫–æ–º–º–∏—Ç—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ä–µ–ª–∏–∑–∞.")
            print(result.stdout)
            sys.exit(1)
        
        current_version = get_current_version()
        new_version = increment_version(current_version, increment_type)
        
        print(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {current_version}")
        print(f"–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {new_version}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        response = input(f"–°–æ–∑–¥–∞—Ç—å —Ä–µ–ª–∏–∑ v{new_version}? (y/N): ")
        if response.lower() != 'y':
            print("–û—Ç–º–µ–Ω–µ–Ω–æ.")
            sys.exit(0)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        print("–û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤–µ—Ä—Å–∏–∏...")
        update_version_file(new_version)
        update_deploy_config(new_version)
        
        # Git –æ–ø–µ—Ä–∞—Ü–∏–∏
        print("–°–æ–∑–¥–∞–µ–º git commit –∏ tag...")
        git_commit_and_tag(new_version)
        
        # –ü—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ remote...")
        run_command("git push")
        run_command("git push --tags")
        
        # –°–æ–∑–¥–∞–µ–º GitHub release
        print("–°–æ–∑–¥–∞–µ–º GitHub release...")
        create_github_release(new_version)
        
        print(f"üéâ –†–µ–ª–∏–∑ v{new_version} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìù –û–±–Ω–æ–≤–∏—Ç–µ Docker image –∏ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞ RunPod:")
        print(f"   docker build -t your-dockerhub-username/wan22-worker:v{new_version} .")
        print(f"   docker push your-dockerhub-username/wan22-worker:v{new_version}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()