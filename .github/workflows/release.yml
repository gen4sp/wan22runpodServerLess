name: Auto Release

on:
    push:
        branches:
            - main

jobs:
    auto-release:
        runs-on: ubuntu-latest
        permissions:
            contents: write
            packages: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.10"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt

            - name: Configure Git
              run: |
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"

            - name: Get current version
              id: current_version
              run: |
                  VERSION=$(python -c "from version import get_version; print(get_version())")
                  echo "version=$VERSION" >> $GITHUB_OUTPUT
                  echo "Current version: $VERSION"

            - name: Check if version bump needed
              id: check_version
              run: |
                  # Получаем последний коммит и проверяем, не содержит ли он уже версию
                  LAST_COMMIT=$(git log -1 --pretty=format:'%s')
                  echo "Last commit: $LAST_COMMIT"

                  if [[ "$LAST_COMMIT" == "chore: bump version to"* ]]; then
                    echo "Version was already bumped in last commit, skipping..."
                    echo "skip=true" >> $GITHUB_OUTPUT
                  else
                    echo "Need to bump version"
                    echo "skip=false" >> $GITHUB_OUTPUT
                  fi

            - name: Determine version increment type
              id: version_type
              if: steps.check_version.outputs.skip == 'false'
              run: |
                  # Анализируем коммиты для определения типа версии
                  RECENT_COMMITS=$(git log --since="1 day ago" --pretty=format:'%s')
                  echo "Recent commits: $RECENT_COMMITS"

                  # Если есть BREAKING CHANGE или major: - делаем major
                  if echo "$RECENT_COMMITS" | grep -i "BREAKING CHANGE\|major:" > /dev/null; then
                    echo "type=major" >> $GITHUB_OUTPUT
                    echo "Version type: major"
                  # Если есть feat: или minor: - делаем minor  
                  elif echo "$RECENT_COMMITS" | grep -i "feat:\|minor:" > /dev/null; then
                    echo "type=minor" >> $GITHUB_OUTPUT
                    echo "Version type: minor"
                  # По умолчанию patch
                  else
                    echo "type=patch" >> $GITHUB_OUTPUT
                    echo "Version type: patch"
                  fi

            - name: Increment version
              id: increment_version
              if: steps.check_version.outputs.skip == 'false'
              run: |
                  # Используем Python для инкремента версии
                  cat > increment_version.py << 'EOF'
                  import re
                  import sys

                  def get_current_version():
                      with open("version.py", "r", encoding="utf-8") as f:
                          content = f.read()
                      match = re.search(r'__version__ = "(\d+\.\d+\.\d+)"', content)
                      return match.group(1)

                  def increment_version(version, increment_type):
                      major, minor, patch = map(int, version.split("."))
                      if increment_type == "major":
                          major += 1
                          minor = 0
                          patch = 0
                      elif increment_type == "minor":
                          minor += 1
                          patch = 0
                      elif increment_type == "patch":
                          patch += 1
                      return f"{major}.{minor}.{patch}"

                  def update_version_file(new_version):
                      with open("version.py", "r", encoding="utf-8") as f:
                          content = f.read()
                      content = re.sub(
                          r'__version__ = "\d+\.\d+\.\d+"',
                          f'__version__ = "{new_version}"',
                          content
                      )
                      version_info = ', '.join(new_version.split('.'))
                      content = re.sub(
                          r'__version_info__ = \(\d+, \d+, \d+\)',
                          f'__version_info__ = ({version_info})',
                          content
                      )
                      with open("version.py", "w", encoding="utf-8") as f:
                          f.write(content)

                  current_version = get_current_version()
                  increment_type = sys.argv[1]
                  new_version = increment_version(current_version, increment_type)
                  update_version_file(new_version)
                  print(new_version)
                  EOF

                  NEW_VERSION=$(python increment_version.py ${{ steps.version_type.outputs.type }})
                  echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
                  echo "New version: $NEW_VERSION"

            - name: Commit and push version update
              if: steps.check_version.outputs.skip == 'false'
              run: |
                  git add version.py
                  git commit -m "chore: bump version to ${{ steps.increment_version.outputs.new_version }}"
                  git tag -a v${{ steps.increment_version.outputs.new_version }} -m "Release v${{ steps.increment_version.outputs.new_version }}"
                  git push origin main
                  git push origin v${{ steps.increment_version.outputs.new_version }}

            - name: Create GitHub Release
              if: steps.check_version.outputs.skip == 'false'
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: v${{ steps.increment_version.outputs.new_version }}
                  name: v${{ steps.increment_version.outputs.new_version }}
                  body: |
                      # WAN 2.2 RunPod Worker v${{ steps.increment_version.outputs.new_version }}

                      ## Изменения
                      - Автоматическое обновление версии до ${{ steps.increment_version.outputs.new_version }}

                      ## Развертывание на RunPod
                      1. Обновите конфигурацию в `deploy_config.json`
                      2. Разверните через RunPod Console или API
                  draft: false
                  prerelease: false
                  generate_release_notes: true

            - name: Upload deployment config
              uses: actions/upload-artifact@v4
              with:
                  name: deploy-config-v${{ steps.current_version.outputs.version }}
                  path: deploy_config.json
