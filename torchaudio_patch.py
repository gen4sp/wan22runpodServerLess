#!/usr/bin/env python3
"""
–ê–ì–†–ï–°–°–ò–í–ù–´–ô –ø–∞—Ç—á –¥–ª—è –æ–±—Ö–æ–¥–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –≤ torchaudio
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ—Ç torchaudio –Ω–∞ mock-–≤–µ—Ä—Å–∏—é –î–û –ª—é–±—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
"""
import sys
import types
import os

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ê–ì–†–ï–°–°–ò–í–ù–û
os.environ['TORCH_AUDIO_BACKEND'] = 'soundfile'
os.environ['TORCHAUDIO_BACKEND'] = 'soundfile'
os.environ['DISABLE_TORCHAUDIO_CUDA_CHECK'] = '1'
os.environ['CM_DISABLE_TORCHAUDIO'] = '1'

def create_mock_torchaudio():
    """–°–æ–∑–¥–∞–µ—Ç mock –º–æ–¥—É–ª–∏ –¥–ª—è torchaudio"""
    
    # –°–æ–∑–¥–∞–µ–º mock –º–æ–¥—É–ª—å –¥–ª—è torchaudio.lib._torchaudio
    _torchaudio_module = types.ModuleType('_torchaudio')
    _torchaudio_module.cuda_version = lambda: '12.8'  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Ä—Å–∏—é CUDA
    
    # –°–æ–∑–¥–∞–µ–º mock –º–æ–¥—É–ª—å –¥–ª—è torchaudio._extension.utils
    utils_module = types.ModuleType('torchaudio._extension.utils')
    utils_module._check_cuda_version = lambda: None  # –ü—É—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    
    # –°–æ–∑–¥–∞–µ–º mock –º–æ–¥—É–ª—å –¥–ª—è torchaudio._extension
    extension_module = types.ModuleType('torchaudio._extension')
    extension_module.utils = utils_module
    extension_module._check_cuda_version = lambda: None
    
    # –°–æ–∑–¥–∞–µ–º mock –º–æ–¥—É–ª—å –¥–ª—è torchaudio.lib
    lib_module = types.ModuleType('torchaudio.lib')
    lib_module._torchaudio = _torchaudio_module

    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π mock –¥–ª—è torchaudio  
    torchaudio_module = types.ModuleType('torchaudio')
    torchaudio_module.lib = lib_module
    torchaudio_module._extension = extension_module
    torchaudio_module.__version__ = '2.5.0'  # –£–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏—é
    torchaudio_module.__file__ = '/usr/local/lib/python3.11/dist-packages/torchaudio/__init__.py'
    
    # –î–æ–±–∞–≤–ª—è–µ–º mock –º–æ–¥—É–ª–∏ –≤ sys.modules
    sys.modules['torchaudio._extension.utils'] = utils_module
    sys.modules['torchaudio._extension'] = extension_module
    sys.modules['torchaudio.lib._torchaudio'] = _torchaudio_module
    sys.modules['torchaudio.lib'] = lib_module
    sys.modules['torchaudio'] = torchaudio_module
    
    return torchaudio_module

# –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –û–ß–ò–°–¢–ö–ê - —É–¥–∞–ª—è–µ–º –ª—é–±—ã–µ —Å–ª–µ–¥—ã torchaudio –∏–∑ sys.modules
modules_to_remove = [key for key in sys.modules.keys() if key == 'torchaudio' or key.startswith('torchaudio.')]
for module_name in modules_to_remove:
    del sys.modules[module_name]
    print(f'üßπ –£–¥–∞–ª–µ–Ω –º–æ–¥—É–ª—å: {module_name}')

# –°–û–ó–î–ê–ï–ú mock –º–æ–¥—É–ª–∏ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û
try:
    create_mock_torchaudio()
    print('‚úÖ torchaudio mock —Å–æ–∑–¥–∞–Ω –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ')
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è torchaudio mock: {e}')

# –ë–õ–û–ö–ò–†–û–í–©–ò–ö –∏–º–ø–æ—Ä—Ç–∞ - –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –ø–æ–ø—ã—Ç–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ torchaudio
class AggressiveTorchaudioBlocker:
    def find_spec(self, fullname, path, target=None):
        if fullname == 'torchaudio' or fullname.startswith('torchaudio.'):
            print(f'üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–º–ø–æ—Ä—Ç: {fullname}')
            # –ï—Å–ª–∏ –º–æ–¥—É–ª—è –Ω–µ—Ç –≤ sys.modules, —Å–æ–∑–¥–∞–µ–º mock
            if fullname not in sys.modules:
                if fullname == 'torchaudio':
                    create_mock_torchaudio()
                # –î–ª—è –ø–æ–¥–º–æ–¥—É–ª–µ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á—Ç–æ —É–∂–µ –µ—Å—Ç—å
            return None
        return None

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫ –í –ù–ê–ß–ê–õ–û meta_path —á—Ç–æ–±—ã –æ–Ω –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª –≤—Å–µ
sys.meta_path.insert(0, AggressiveTorchaudioBlocker())
print('üö´ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫ torchaudio —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

print('‚úÖ –ê–ì–†–ï–°–°–ò–í–ù–´–ô torchaudio –ø–∞—Ç—á –ø—Ä–∏–º–µ–Ω–µ–Ω')